dist2Centers(rw,centers)
})
}
n = dim(data)[1]
numKnownGroups <- length(unique(trueLabels[knownLabels]))
centers <- NULL
for(grp in 1:numKnownGroups){
knownGroupmembers <- knownLabels[knownLabels %in% which(trueLabels==(grp-1))]
centers[[grp]]<-apply(data[knownGroupmembers,],2,mean)
}# end for
cannotBeConsidered <- knownLabels
numGroupsLeft <- numGroups - numKnownGroups
while(numGroupsLeft > 0){
numKnownGroups <- numKnownGroups + 1
newCenterIndex <- sample((1:n)[-cannotBeConsidered],1, prob = getAllDist2Centers(data[(1:n)[-cannotBeConsidered],],centers))
cannotBeConsidered <- c(cannotBeConsidered,newCenterIndex)
centers[[numKnownGroups]]<- data[newCenterIndex,]
numGroupsLeft <- numGroups- numKnownGroups
}# end while
centers
}# end kppInit
ss = ssVN(adj=A$adj,
embeddingDim=3,
knownRed =knownRed ,
knownNotRed = knownNotRed)
kppInit
rm(list=ls())
library(ssClust)
kppInit
ls()
?ssClust
remove.packages(ssClust)
?remove.packages
remove.packages("ssClust")
ss = ssVN(adj=A$adj,
embeddingDim=3,
knownRed =knownRed ,
knownNotRed = knownNotRed)
rm(list=ls())
library('ssClust')
ssVN <- function(adj,
embeddingDim,
knownRed,
knownNotRed){
theData <- svd.extract(A=adj, dim=embeddingDim, scaling=TRUE)
n = nrow(theData)
#set up SS info
trueLabels <- rep(NA, n)
trueLabels[knownRed] = 1
knownCannotLink = knownNotRed
cannotLinkWithIdx=new.env()
for(i in knownCannotLink){
cannotLinkWithIdx[[as.character(i)]]<-knownRed[1]
}
ss<-ssClust(X = theData,
knownLabels=knownRed,
trueLabels=trueLabels,
knownCannotLink=knownNotRed,
cannotLinkWithIdx=cannotLinkWithIdx,
Grange=c(2:5),
modelNames=c('VVV',"EEE","VII","EII"),
runParallel=TRUE,
fracOfCores2Use=1,
initClassAssignments=NULL)
#now determine which class is "red"
redClassNumber <- unique(ss$cl[knownRed])
#then process the z's and get mahalanobis distance for rankings
redRanking <- ss$z[,redClassNumber]
library('stats')
mahalanobisDistances <- mahalanobis(theData,
center = ss$parameters$mean[,redClassNumber],
cov = ss$parameters$variance$sigma[,,redClassNumber])
return(list(redRanking=redRanking, redDist = mahalanobisDistances,ssClustObj = ss))
}
nonpsd.laplacian <- function(A){
n <- nrow(A)
s <- rowSums(A)/(n-1)
diag(A) <- diag(A)+s
return(A)
}
svd.extract <- function(A, dim = NULL, scaling = FALSE){
require(irlba)
if(dim(A)[1]==dim(A)[2]){
L <- nonpsd.laplacian(A)
} else {
L <- A
}
#    L.svd <- svd(L)
if(is.null(dim)) {
L.svd <- irlba(L)
dim <- scree.thresh(L.svd$d)
} else {
L.svd <- irlba(L,dim,dim)
}
L.svd.values <- L.svd$d[1:dim]
L.svd.vectors <- L.svd$v[,1:dim]
if(scaling == TRUE){
if(dim == 1)
L.coords <- sqrt(L.svd.values) * L.svd.vectors
else
L.coords <- L.svd.vectors %*% diag(sqrt(L.svd.values))
}
else{
L.coords <- L.svd.vectors
}
return(L.coords)
}
#######exper
library('ssClust')
n <- 500
rho <- c(0.2,0.4,.3)
B <- matrix(c(0.4,0.3,.1,
0.3,0.5,.2,
.1,0.2, .35),nrow = 3,ncol=3)
source("~/Dropbox/Work with Carey/vertexNomSSClust/ssClustDefNotInClass/R//stfp-yp.R")
A <- rg.SBM(n,B,rho)
knownRed <- sample(which(A$tau==1),40)
knownNotRed <-sample(which(A$tau!=1),40)
adj=A$adj
embeddingDim=3
ss = ssVN(adj=A$adj,
embeddingDim=3,
knownRed =knownRed ,
knownNotRed = knownNotRed)
rm(list=ls())
library('ssClust')
ssVN <- function(adj,
embeddingDim,
knownRed,
knownNotRed){
theData <- svd.extract(A=adj, dim=embeddingDim, scaling=TRUE)
n = nrow(theData)
#set up SS info
trueLabels <- rep(NA, n)
trueLabels[knownRed] = 1
knownCannotLink = knownNotRed
cannotLinkWithIdx=new.env()
for(i in knownCannotLink){
cannotLinkWithIdx[[as.character(i)]]<-knownRed[1]
}
ss<-ssClust(X = theData,
knownLabels=knownRed,
trueLabels=trueLabels,
knownCannotLink=knownNotRed,
cannotLinkWithIdx=cannotLinkWithIdx,
Grange=c(2:5),
modelNames=c('VVV',"EEE","VII","EII"),
runParallel=TRUE,
fracOfCores2Use=1,
initClassAssignments=NULL)
#now determine which class is "red"
redClassNumber <- unique(ss$cl[knownRed])
#then process the z's and get mahalanobis distance for rankings
redRanking <- ss$z[,redClassNumber]
library('stats')
mahalanobisDistances <- mahalanobis(theData,
center = ss$parameters$mean[,redClassNumber],
cov = ss$parameters$variance$sigma[,,redClassNumber])
return(list(redRanking=redRanking, redDist = mahalanobisDistances,ssClustObj = ss))
}
nonpsd.laplacian <- function(A){
n <- nrow(A)
s <- rowSums(A)/(n-1)
diag(A) <- diag(A)+s
return(A)
}
svd.extract <- function(A, dim = NULL, scaling = FALSE){
require(irlba)
if(dim(A)[1]==dim(A)[2]){
L <- nonpsd.laplacian(A)
} else {
L <- A
}
#    L.svd <- svd(L)
if(is.null(dim)) {
L.svd <- irlba(L)
dim <- scree.thresh(L.svd$d)
} else {
L.svd <- irlba(L,dim,dim)
}
L.svd.values <- L.svd$d[1:dim]
L.svd.vectors <- L.svd$v[,1:dim]
if(scaling == TRUE){
if(dim == 1)
L.coords <- sqrt(L.svd.values) * L.svd.vectors
else
L.coords <- L.svd.vectors %*% diag(sqrt(L.svd.values))
}
else{
L.coords <- L.svd.vectors
}
return(L.coords)
}
#######exper
library('ssClust')
n <- 500
rho <- c(0.2,0.4,.3)
B <- matrix(c(0.4,0.3,.1,
0.3,0.5,.2,
.1,0.2, .35),nrow = 3,ncol=3)
source("~/Dropbox/Work with Carey/vertexNomSSClust/ssClustDefNotInClass/R//stfp-yp.R")
A <- rg.SBM(n,B,rho)
knownRed <- sample(which(A$tau==1),40)
knownNotRed <-sample(which(A$tau!=1),40)
adj=A$adj
embeddingDim=3
ss = ssVN(adj=A$adj,
embeddingDim=3,
knownRed =knownRed ,
knownNotRed = knownNotRed)
#Test for getModifiedPro
for(f in list.files()) source(f)
n <- 500
rho <- c(0.1,0.4,.5)
B <- matrix(c(0.7,0.42,.4,
0.42,0.6,.4,
.4, .4,.7),nrow = 3,ncol=3)
A <- rg.SBM(n,B,rho)
knownRed <- sample(which(A$tau==1),10)
knownNotRed <-sample(which(A$tau!=1),10)
adj=A$adj
embeddingDim=3
theData <- svd.extract(A=adj, dim=embeddingDim, scaling=TRUE)
n = nrow(theData)
G=3
#set up SS info
trueLabels <- rep(NA, n)
trueLabels[knownRed] = 1
knownCannotLink = knownNotRed
cannotLinkWithIdx=new.env()
for(i in knownCannotLink){
cannotLinkWithIdx[[as.character(i)]]<-knownRed[1]
}
knownLabels=knownRed
trueLabels=trueLabels
knownCannotLink=knownNotRed
trueLabels[-c(knownCannotLink, knownLabels)] <- sample(1:G, n - length(knownCannotLink) - length(knownLabels),rep=T)
trueLabels[knownCannotLink] <- sample(2:G, length(knownCannotLink),rep=T)
clss <- trueLabels -1
prohibitedGroups = new.env()
if(!is.null(knownCannotLink)){
for(i in knownCannotLink){
prohibitedGroups[[as.character(i)]] = NULL
for(j in cannotLinkWithIdx[[as.character(i)]]){
if(!j %in% knownLabels ) stop("cannotLinkWithIdx must be amungst knownLabels")
prohibitedGroups[[as.character(i)]] = c(prohibitedGroups[[as.character(i)]], clss[j])
}#end for j
prohibitedGroups[[as.character(i)]] = unique(prohibitedGroups[[as.character(i)]])
}#end for
}
m <- NULL
m$G <- G
X = theData
knownLabels=knownRed
trueLabels=trueLabels
knownCannotLink=knownNotRed
cannotLinkWithIdx=cannotLinkWithIdx
Grange=c(2:5)
modelNames=c('VVV',"EEE","VII","EII")
runParallel=TRUE
fracOfCores2Use=1
initClassAssignments=NULL
data=X
G=as.integer(indivModels[i,1])
modelName=as.character(indivModels[i,2])
loadParallelFramework(runParallel, fracOfCores2Use)
if(!is.null(trueLabels)){
trueLabels<-trueLabels-min(trueLabels[!is.na(trueLabels)])
numberOfClassesKnown = length(unique(trueLabels[knownLabels]))
} else{
numberOfClassesKnown=0
}
Grange = Grange[Grange >= numberOfClassesKnown]
#Go through all the models and apply semi-supervised clustering
indivModels<- expand.grid(x=Grange,y=modelNames)
num2run <- nrow(indivModels)
#build heiarchical model up front
hcObj = NULL
G=as.integer(indivModels[i,1])
modelName=as.character(indivModels[i,2])
i
i=1
G=as.integer(indivModels[i,1])
modelName=as.character(indivModels[i,2])
dataDim = dim(data)
oneD = FALSE
if(is.null(dataDim)|| dataDim[2]==1) oneD = TRUE
if(oneD){
n = length(data)
d = 1
} else {
n = nrow(data)
d = ncol(data)
}
c = length(knownLabels)
centers <- kppInit(data,G,knownLabels,trueLabels)
centers <- kppInit(data,G,knownLabels,trueLabels)
library(ssCluost)
library(ssClust)
e
centers <- kppInit(data,G,knownLabels,trueLabels)
remove.packages("ssClust")
library(ssClust)
centers <- kppInit(data,G,knownLabels,trueLabels)
?kppInit
remove.packages("ssClust")
library("ssClust")
remove.packages("ssClust")
library("ssClust")
?ssClust
library("gsdgfsdfhg")
library("ssClust")
library("ssClust")
library("ssClust")
kppInit
rm(list=ls())
library('ssClust')
ssVN <- function(adj,
embeddingDim,
knownRed,
knownNotRed){
theData <- svd.extract(A=adj, dim=embeddingDim, scaling=TRUE)
n = nrow(theData)
#set up SS info
trueLabels <- rep(NA, n)
trueLabels[knownRed] = 1
knownCannotLink = knownNotRed
cannotLinkWithIdx=new.env()
for(i in knownCannotLink){
cannotLinkWithIdx[[as.character(i)]]<-knownRed[1]
}
ss<-ssClust(X = theData,
knownLabels=knownRed,
trueLabels=trueLabels,
knownCannotLink=knownNotRed,
cannotLinkWithIdx=cannotLinkWithIdx,
Grange=c(2:5),
modelNames=c('VVV',"EEE","VII","EII"),
runParallel=TRUE,
fracOfCores2Use=1,
initClassAssignments=NULL)
#now determine which class is "red"
redClassNumber <- unique(ss$cl[knownRed])
#then process the z's and get mahalanobis distance for rankings
redRanking <- ss$z[,redClassNumber]
library('stats')
mahalanobisDistances <- mahalanobis(theData,
center = ss$parameters$mean[,redClassNumber],
cov = ss$parameters$variance$sigma[,,redClassNumber])
return(list(redRanking=redRanking, redDist = mahalanobisDistances,ssClustObj = ss))
}
nonpsd.laplacian <- function(A){
n <- nrow(A)
s <- rowSums(A)/(n-1)
diag(A) <- diag(A)+s
return(A)
}
svd.extract <- function(A, dim = NULL, scaling = FALSE){
require(irlba)
if(dim(A)[1]==dim(A)[2]){
L <- nonpsd.laplacian(A)
} else {
L <- A
}
#    L.svd <- svd(L)
if(is.null(dim)) {
L.svd <- irlba(L)
dim <- scree.thresh(L.svd$d)
} else {
L.svd <- irlba(L,dim,dim)
}
L.svd.values <- L.svd$d[1:dim]
L.svd.vectors <- L.svd$v[,1:dim]
if(scaling == TRUE){
if(dim == 1)
L.coords <- sqrt(L.svd.values) * L.svd.vectors
else
L.coords <- L.svd.vectors %*% diag(sqrt(L.svd.values))
}
else{
L.coords <- L.svd.vectors
}
return(L.coords)
}
#######exper
library('ssClust')
n <- 500
rho <- c(0.2,0.4,.3)
B <- matrix(c(0.4,0.3,.1,
0.3,0.5,.2,
.1,0.2, .35),nrow = 3,ncol=3)
source("~/Dropbox/Work with Carey/vertexNomSSClust/stfp-yp.R")
A <- rg.SBM(n,B,rho)
knownRed <- sample(which(A$tau==1),40)
knownNotRed <-sample(which(A$tau!=1),40)
adj=A$adj
embeddingDim=3
ss = ssVN(adj=A$adj,
embeddingDim=3,
knownRed =knownRed ,
knownNotRed = knownNotRed)
setwd("~/Dropbox/Work with Carey/vertexNomSSClust/ssClustDefNotInClass/R")
#Test for getModifiedPro
for(f in list.files()) source(f)
n <- 500
rho <- c(0.1,0.4,.5)
B <- matrix(c(0.7,0.42,.4,
0.42,0.6,.4,
.4, .4,.7),nrow = 3,ncol=3)
A <- rg.SBM(n,B,rho)
knownRed <- sample(which(A$tau==1),10)
knownNotRed <-sample(which(A$tau!=1),10)
adj=A$adj
embeddingDim=3
theData <- svd.extract(A=adj, dim=embeddingDim, scaling=TRUE)
n = nrow(theData)
G=3
#set up SS info
trueLabels <- rep(NA, n)
trueLabels[knownRed] = 1
knownCannotLink = knownNotRed
cannotLinkWithIdx=new.env()
for(i in knownCannotLink){
cannotLinkWithIdx[[as.character(i)]]<-knownRed[1]
}
knownLabels=knownRed
trueLabels=trueLabels
knownCannotLink=knownNotRed
trueLabels[-c(knownCannotLink, knownLabels)] <- sample(1:G, n - length(knownCannotLink) - length(knownLabels),rep=T)
trueLabels[knownCannotLink] <- sample(2:G, length(knownCannotLink),rep=T)
clss <- trueLabels -1
prohibitedGroups = new.env()
if(!is.null(knownCannotLink)){
for(i in knownCannotLink){
prohibitedGroups[[as.character(i)]] = NULL
for(j in cannotLinkWithIdx[[as.character(i)]]){
if(!j %in% knownLabels ) stop("cannotLinkWithIdx must be amungst knownLabels")
prohibitedGroups[[as.character(i)]] = c(prohibitedGroups[[as.character(i)]], clss[j])
}#end for j
prohibitedGroups[[as.character(i)]] = unique(prohibitedGroups[[as.character(i)]])
}#end for
}
m <- NULL
m$G <- G
#
#
# genVecInSimplex<-function(theDim){
#   v <- runif(theDim)
#    v/sum(v)
# }
# z<-matrix(0,n,G)
# for(i in 1:n){
#   z[i,] <- genVecInSimplex(G)
# }
#
# z <- modifyZ(z,
#              G,
#              clss,
#              knownLabels,
#              knownCannotLink,
#              prohibitedGroups)
#
#
for(f in list.files())source(f)
X = theData
knownLabels=knownRed
trueLabels=trueLabels
knownCannotLink=knownNotRed
cannotLinkWithIdx=cannotLinkWithIdx
Grange=c(2:5)
modelNames=c('VVV',"EEE","VII","EII")
runParallel=TRUE
fracOfCores2Use=1
initClassAssignments=NULL
i=1
data=X
G=2#as.integer(indivModels[i,1])
modelName="EEE"#as.character(indivModels[i,2])
loadParallelFramework(runParallel, fracOfCores2Use)
if(!is.null(trueLabels)){
trueLabels<-trueLabels-min(trueLabels[!is.na(trueLabels)])
numberOfClassesKnown = length(unique(trueLabels[knownLabels]))
} else{
numberOfClassesKnown=0
}
Grange = Grange[Grange >= numberOfClassesKnown]
#Go through all the models and apply semi-supervised clustering
indivModels<- expand.grid(x=Grange,y=modelNames)
num2run <- nrow(indivModels)
#build heiarchical model up front
hcObj = NULL
dataDim = dim(data)
oneD = FALSE
if(is.null(dataDim)|| dataDim[2]==1) oneD = TRUE
if(oneD){
n = length(data)
d = 1
} else {
n = nrow(data)
d = ncol(data)
}
c = length(knownLabels)
centers <- kppInit(data,G,knownLabels,trueLabels)
clss <- getClassGivenCenters(data,knownLabels,trueLabels,centers)
clss[knownNotRed]
clss
getClassGivenCenters
clss <- getClassGivenCenters(data,knownLabels,trueLabels,centers, knownCannotLink, cannotLinkWithIdx)
clss
class[knownNotRed]
clas[knownNotRed]
clss[knownNotRed]
